@import url("https://fonts.googleapis.com/css?family=Merriweather+Sans:400,400i,700,700i");
html,
body {
  font-family: 'Merriweather Sans', Arial, sans-serif;
}
body {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizeLegibility;
  letter-spacing: normal;
  word-spacing: normal;
  font-size: 14pt;
  line-height: 1.44em;
  color: #000;
  cursor: auto !important;
}
pre,
code,
tt,
kbd,
samp {
  font: normal 14pt/1.44em Monaco, Consolas, 'Lucida Console', monospace;
}
a,
.search-result-meta a,
.tagline a,
.thing a.title {
  color: #05f;
  text-decoration: none;
}
a:visited,
.search-result-meta a:visited,
.tagline a:visited,
.thing a.title:visited {
  color: #b48;
}
a:hover,
.search-result-meta a:hover,
.tagline a:hover,
.thing a.title:hover {
  text-decoration: underline;
}
.md a:not(.expando-button) {
  padding-bottom: 1px;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: rgba(0,85,255,0.5);
}
.md a:not(.expando-button),
.md a:not(.expando-button):link {
  color: inherit;
}
.md a:not(.expando-button):visited {
  border-bottom-color: rgba(187,68,136,0.5);
}
.md a:not(.expando-button),
.md a:not(.expando-button):hover,
.md a:not(.expando-button):link,
.md a:not(.expando-button):visited {
  text-decoration: none;
}
.md a:not(.expando-button):hover {
  color: #05f;
  -webkit-transition: all ease-in 0.25s;
  -moz-transition: all ease-in 0.25s;
  transition: all ease-in 0.25s;
}
.md a:not(.expando-button):hover:visited {
  color: #b48;
}
.md,
.md .-text,
.md pre > code,
.md li,
.md p,
.md textarea,
.md th,
.md td {
  font-size: inherit;
}
.usertext,
.md-container,
.md-container-small {
  font-size: inherit;
}
.commentingAs {
  font-size: 0.9em;
}
.tagline,
.flat-list,
.search-result-meta,
.RESDialogSmall,
.menuarea,
.morecomments a {
  font-size: 0.8em;
}
.domain {
  font-size: 0.7em;
}
.side {
  overflow-x: hidden;
  position: relative;
  z-index: 2;
  margin-right: -295px;
  right: -300px;
}
body.with-listing-chooser .listing-chooser {
  width: 200px;
}
body.with-listing-chooser > .content,
body.with-listing-chooser .footer-parent {
  margin-left: 218px;
}
.thing {
  position: relative;
}
.thing .title {
  font-weight: bold;
  font-size: inherit;
  line-height: 2em;
}
.entry {
  position: relative;
  margin: 0;
  padding: 6px 9px 6px 30px;
  border-style: solid;
  border-width: 2px;
  border-color: transparent;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}
.entry.RES-keyNav-activeElement {
  border-color: #80aaff;
  z-index: 2;
  margin: -4px -9px -5px -5px;
  padding: 10px 18px 11px 35px;
}
.entry .flat-list li a,
.entry a.give-gold {
  color: #406abf !important;
  font-size: inherit;
}
.entry .flat-list li a:after,
.entry a.give-gold:after {
  display: none;
}
.md {
  color: inherit;
  max-width: 100%;
}
.linklisting .md,
.commentarea .md {
  margin: 0.5em 0.25em 0 0;
}
.md blockquote {
  margin: 0.5em 0;
  padding: 0.4em 0.5em 0.25em;
  border-left: solid 2px #444;
  color: #000;
  background-color: #ddd;
  font-style: italic;
}
.expand-inline {
  margin-left: -20px;
}
.organic-listing .link .entry {
  border-bottom: none;
  padding-bottom: 0;
}
.organic-listing .sponsored-tagline {
  display: none;
}
.link.last-clicked {
  border: none !important;
}
.link .entry {
  border-bottom-color: #ccc;
}
.link .entry.RES-keyNav-activeElement {
  border-bottom-color: #80aaff;
}
.link .thumbnail,
.link .midcol {
  margin-top: 5px !important;
}
.link .thumbnail.self {
  display: none;
}
.link .tagline {
  float: left;
  line-height: 2.4em;
}
.link .flair,
.link .linkflairlabel {
  display: inline;
  font-size: 0.6em;
  padding: 0.25em 0.5em;
}
.link .flair:empty,
.link .linkflairlabel:empty {
  display: none;
}
.link .flat-list {
  float: right;
  padding-right: 0.5em;
  line-height: 2.4em;
}
@media only screen and (max-width: 959px) {
  .link .flat-list {
    float: none;
    padding-right: 0px;
  }
}
.link .flat-list a.comments {
  color: #fff !important;
  background-color: #49f !important;
  border-radius: 4px !important;
  padding: 4px 6px 4px !important;
}
.link .flat-list a.comments .newComments {
  color: #bbb;
  font-style: italic;
}
.link .flat-list a.comments:hover {
  background-color: #0049a2 !important;
  text-decoration: none;
}
.link .flat-list a.comments:visited {
  background-color: #c60 !important;
}
.link .flat-list a.comments:visited:hover {
  background-color: #630 !important;
}
.link .usertext-body {
  padding-top: 0.8em;
}
.link .usertext-body .md {
  border: 0;
  background-color: inherit;
}
.comment .midcol {
  position: absolute;
  top: 0.5em;
  left: 7.5px;
  width: 25px;
  float: none;
  margin: 0;
  z-index: 4;
}
.comment .midcol .arrow {
  margin: 0 0 0.5em;
}
.comment .midcol .arrow:before {
  display: none !important;
}
.comment .parent {
  margin-left: 30px;
}
.comment .entry {
  background-color: inherit;
}
.comment .keyNavAnnotation {
  display: none !important;
}
.comment .tagline {
  display: block;
  border-bottom: dotted 1px #888;
  padding-bottom: 0.3em;
  margin-bottom: 0.3em;
  z-index: 20;
}
.comment .tagline .score {
  font-weight: bold;
}
.comment .morechildren .tagline {
  border-bottom: 0;
}
.comment .flat-list {
  vertical-align: bottom;
  z-index: 8;
  opacity: 0.5;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=50)";
  filter: alpha(opacity=50);
}
@media only screen and (max-width: 959px) {
  .comment .flat-list {
    margin: 0.5em 0 0;
    padding: 0.25em 0.5em;
    border-top: dotted 1px #888;
  }
}
@media only screen and (min-width: 960px) {
  .comment .flat-list {
    position: absolute;
    top: 0.5em;
    right: 0.75em;
    font-size: 0.7em;
    visibility: hidden;
  }
}
@media only screen and (max-width: 959px) {
  .comment.RES-keyNav-activeThing > .entry .flat-list {
    opacity: 1;
    -ms-filter: none;
    filter: none;
  }
}
@media only screen and (min-width: 960px) {
  .comment.RES-keyNav-activeThing > .entry .flat-list {
    opacity: 0.75;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=75)";
    filter: alpha(opacity=75);
    visibility: visible;
  }
}
.comment.RES-keyNav-activeThing > .entry .flat-list:hover {
  opacity: 1;
  -ms-filter: none;
  filter: none;
}
.comment .tagline:empty,
.comment .child:empty {
  display: none;
}
.profile-page .linklisting .comment {
  margin-bottom: 0.5em;
  position: static;
}
.profile-page .linklisting .comment:nth-child(4n+1) {
  background-color: #f4f4f4;
}
.newComments {
  color: #000;
}
.new-comment .usertext-body {
  border: none;
}
.new-comment .usertext-body .md {
  padding: 4px 0 0;
}
.new-comment .usertext-body.md-container,
.new-comment.RES-keyNav-activeThing .usertext-body.md-container {
  background-color: #fde !important;
}
.edited-timestamp {
  visibility: hidden !important;
  position: absolute !important;
}
.usertext-edit {
  width: 800px !important;
  max-width: 90% !important;
  margin: 0.75em 0 0 0.5em;
  font-size: inherit;
}
.usertext-edit textarea[name = text] {
  width: 100% !important;
  min-height: 8em;
  padding: 0.4em 0.6em;
  border: solid 1px #888;
  font-family: inherit;
  font-size: 0.9em;
}
#sr-header-area {
  height: auto !important;
}
#sr-header-area a {
  font-size: 10pt !important;
}
#RESShortcutsViewport {
  max-height: 100% !important;
  overflow-y: visible !important;
}
#header {
  min-height: 80px;
}
#header-bottom-left {
  position: absolute;
  bottom: 1px;
  left: 0;
}
#header-bottom-right {
  margin-top: 3px;
}
.res-commentBoxes .comment {
  padding: 0 !important;
}
.RESDialogSmall.livePreview {
  padding: 0.25em 0.5em;
}
.RESDialogSmall.livePreview > h3 {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  margin: 10px 0 0;
  padding: 0.25em 0.5em 0 0.5em;
  border-bottom: none;
  border-top: 1px solid #bbb;
}
.RESDialogSmall.livePreview > .md {
  padding-bottom: 36px;
}
.RESDialogSmall.livePreview .gearIcon {
  float: left;
  margin: -0.15em 0.5em 0 0;
}
.RES-keyNav-activeElement,
.RES-keyNav-activeElement .md-container {
  background-color: inherit !important;
}
#keyHelp {
  width: 480px;
  font-size: 12pt;
}
#keyHelp td:first-child {
  width: 120px;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
