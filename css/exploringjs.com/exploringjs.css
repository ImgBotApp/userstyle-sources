@import url("https://fonts.googleapis.com/css?family=Noto+Sans:400,400i,700,700i");
html {
  font-size: 14pt;
}
body {
  font-family: 'Noto Sans';
  font-weight: $font-weight;
  font-feature-settings: "liga", "dlig";
  -webkit-text-size-adjust: 100%;
  font-size-adjust: 14pt;
  line-height: $line-height;
  word-spacing: normal;
  letter-spacing: normal;
  color: #121212;
  background-color: #f5f6f7;
  text-rendering: optimizeLegibility;
  image-rendering: -webkit-optimize-contrast;
  -ms-interpolation-mode: nearest-neighbor;
  image-rendering: crisp-edges;
  cursor: auto !important;
}
pre,
code,
tt,
kbd,
samp {
  font: normal inherit Menlo, Consolas, Monaco, "Lucida Console", monospace;
  line-height: $line-height;
}
pre {
  white-space: pre-wrap;
}
a {
  color: #05f;
  text-decoration: none;
}
a:visited {
  color: #b48;
}
a:hover {
  text-decoration: underline;
}
#page-content {
  max-width: 960px;
  line-height: 1.44em;
}
li {
  margin-bottom: 0.3em;
}
h3 {
  border-bottom: solid 2px rgba(0,0,0,0.2);
}
:not(pre) > code {
  font-size: 0.9em;
  -webkit-box-shadow: 1px 1px 3px 2px rgba(0,0,0,0.2);
  box-shadow: 1px 1px 3px 2px rgba(0,0,0,0.2);
  border-radius: 4px;
  padding: 2px 4px;
  margin-left: 1px;
  margin-right: 1px;
}
.highlight pre {
  color: #f2f3f4;
  background-color: #121314;
  margin: 0.8em 1em 1.2em;
  padding: 0.25em 0.5em;
  -webkit-box-shadow: 0.3em 0.4em 0.2em 0 #bbb;
  box-shadow: 0.3em 0.4em 0.2em 0 #bbb;
  font-size: 0.9rem;
}
.highlight .c1 {
  color: #50c878;
  font-style: italic;
}
.highlight .k,
.highlight .kd,
.highlight .kr {
  color: #fdfd96;
  font-weight: 600;
}
.highlight .kc {
  color: #fdfd96;
}
.highlight .o,
.highlight .p,
.highlight .err {
  color: #d6cadd;
  font-weight: normal;
}
.highlight .nx {
  color: #5cf;
}
.highlight .p + .nx,
.highlight .kd + .nx {
  color: inherit;
}
.highlight .mi,
.highlight .s1,
.highlight .sb {
  color: #88ffc4;
  font-style: italic;
}
.highlight .sr,
.highlight .ss {
  color: #ff1493;
}
.highlight .si {
  color: #ff1493;
}
.highlight .nt {
  color: #1e90ff;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
