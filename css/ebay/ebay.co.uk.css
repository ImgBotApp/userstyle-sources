.listCntWrpr {
  display: none !important;
}
/* Full descriptions */
.con-results-tiles .con-rst {
  float: none;
  display: inline-block;
  height: auto;
}
.con-results-tiles .ittl a.vip {
  font-size: 1rem;
}
.con-results-tiles .binpr,
.con-results-tiles .bin {
  margin-left: 0em;
  margin-right: 0.25em;
  padding: 0 0.25em 0 0;
  border-right: solid 1px #aaa;
}
.con-results-tiles .prc,
.con-results-tiles .hts-txt {
  display: block;
}
.con-results-tiles .prc:last-child,
.con-results-tiles .hts-txt:last-child {
  border-right: none;
}
.con-results-tiles .prc {
  margin-top: 0.75rem;
}
.con-results-tiles .prc .binpr {
  font-size: 1.2rem;
  color: #ff8c00;
}
.con-results-tiles .prc .bin {
  font-size: 0.9rem;
  color: #388e3c;
  border-right: none;
}
.con-results-tiles .prc .g-b {
  font-size: 1.2rem;
  color: #ff8c00;
  float: left;
  margin-right: 0.25em;
  padding-right: 0.25em;
  border-right: solid 1px #aaa;
}
.con-results-tiles .prc .bids {
  padding-left: 0px;
  font-size: 0.9rem;
  float: left;
}
.con-results-tiles .prc .bids-time-left {
  font-size: 1rem;
}
.con-results-tiles .hts-txt {
  margin-top: 0.5rem;
}
.con-results-tiles .hts-txt .hts-sp,
.con-results-tiles .hts-txt .free {
  font-size: 1rem;
  color: inherit;
}
.con-results-tiles h3.ittl,
table.gv-ic div.ittl,
#smePrimaryItemFilmstrip div.ittl {
  white-space: normal;
}
/* Carousels */
.mfe-vr140 .mfe-recos-container,
.nume-vr140 .container,
.reco {
  padding: 0 !important;
}
.reco-strip {
  margin: 0 !important;
}
.reco-items {
  right: 0 !important;
}
.nume-vr140 .center,
.reco-strip {
  overflow: auto !important;
}
.nume-vr140 .column {
  float: none !important;
}
.mfe-vr140 .mfe-recos,
.nume-vr140 .recos {
  width: 100% !important;
  white-space: normal !important;
  position: static !important;
}
.mfe-vr140 .mfe-reco-ct,
.nume-vr140 .recos li,
.reco-strip li {
  display: inline-block !important;
  float: none !important;
  visibility: visible !important;
  vertical-align: top !important;
  word-break: break-word !important;
  margin-left: 0 !important;
}
.recos a {
  line-height: 1.4em !important;
  padding-bottom: 8px !important;
}
span.freeship:not(:empty) {
  background-color: #ff0 !important;
  font-size: 1em !important;
  padding: 2px 0;
}
.nume-vr140 .left,
.nume-vr140 .right,
.reco-strip button,
.mfe-page {
  display: none !important;
}
.sil-cnt .gallery .dtl div,
.ittl,
.reco {
  white-space: normal !important;
}
/* Bigger items */
.nume-vr140 .recos li,
.reco-strip li {
  width: 189px !important;
}
.nume-vr140 .recos li .i140,
.nume-vr140 .recos li .imgt,
.reco-strip li .imgt {
  width: 175px !important;
  height: 175px !important;
}
.nume-vr140 .recos li .i140,
.reco-strip li .i140 {
  margin-bottom: 8px !important;
}
.nume-vr140 .recos li .imgt img,
.reco-strip li .imgt img {
  max-width: 175px !important;
  max-height: 175px !important;
}
.gvtitle {
  height: 100% !important;
}
.gvtitle h3 {
  white-space: normal !important;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
