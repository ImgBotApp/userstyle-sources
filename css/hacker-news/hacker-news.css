@import url("https://fonts.googleapis.com/css?family=Merriweather+Sans:400,700");
html,
body {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizeLegibility;
  letter-spacing: normal;
  word-spacing: normal;
}
body {
  font-size: 13pt;
  line-height: 1.44em;
}
.pagetop,
.title {
  font: 15pt/1.44em 'Merriweather Sans', Arial, sans-serif;
}
.default,
.comhead,
.subtext,
.reply,
.comment {
  font: 13pt/1.44em 'Merriweather Sans', Arial, sans-serif;
}
.profileform td {
  font: 13pt/1.44em 'Merriweather Sans', Arial, sans-serif;
  padding: 0.2em 0.5em;
}
.profileform input,
.profileform select,
.profileform textarea {
  font: 12pt/1.44em 'Merriweather Sans', Arial, sans-serif;
  padding: 0.1em 0.25em;
}
.profileform a {
  color: #37f !important;
  text-decoration: none !important;
  opacity: 0.7;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=70)";
  filter: alpha(opacity=70);
  -webkit-transition: opacity 0.2s ease-in-out;
  -moz-transition: opacity 0.2s ease-in-out;
  transition: opacity 0.2s ease-in-out;
}
.profileform a:hover {
  opacity: 1;
  -ms-filter: none;
  filter: none;
}
#hnmain {
  background-color: transparent !important;
  width: 80vw !important;
}
.comment-tree,
.comtr > td > table {
  width: 100%;
  table-layout: auto;
}
.comment {
  max-width: 100%;
}
.itemlist .votelinks {
  vertical-align: middle !important;
}
.itemlist .title {
  padding: 0 0.25em 0.25em;
}
.itemlist .spacer {
  height: 0.5em !important;
}
.ind img[width = "40"] {
  width: 20px !important;
}
.ind img[width = "80"] {
  width: 40px !important;
}
.ind img[width = "120"] {
  width: 60px !important;
}
.ind img[width = "160"] {
  width: 80px !important;
}
.ind img[width = "200"] {
  width: 100px !important;
}
.ind img[width = "240"] {
  width: 120px !important;
}
.ind img[width = "280"] {
  width: 140px !important;
}
.ind img[width = "320"] {
  width: 160px !important;
}
.ind img[width = "360"] {
  width: 180px !important;
}
.ind img[width = "400"] {
  width: 200px !important;
}
a.hnuser {
  color: #37f !important;
  text-decoration: none !important;
  font-weight: bold;
  opacity: 0.7;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=70)";
  filter: alpha(opacity=70);
  -webkit-transition: opacity 0.2s ease-in-out;
  -moz-transition: opacity 0.2s ease-in-out;
  transition: opacity 0.2s ease-in-out;
}
a.hnuser:hover {
  opacity: 1;
  -ms-filter: none;
  filter: none;
}
.age a:hover {
  text-decoration: none;
}
a.togg {
  letter-spacing: 0.1em;
  color: #000;
}
a.togg:hover {
  text-decoration: none;
  font-weight: bold;
}
.default {
  position: relative;
  width: 100%;
}
.default > :first-child {
  margin-top: 0 !important;
  margin-bottom: 0 !important;
  border-bottom: solid 1px #888;
  padding: 0 0 0.25em;
}
.default > br {
  display: none;
}
.default .reply {
  height: 0px;
}
.default .reply a {
  display: block;
  position: absolute;
  top: 0;
  right: 0;
  text-decoration: none !important;
  text-transform: uppercase;
  color: #37f !important;
  font-weight: bold;
  font-size: 0.9rem;
  opacity: 0.7;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=70)";
  filter: alpha(opacity=70);
  -webkit-transition: opacity 0.2s ease-in-out;
  -moz-transition: opacity 0.2s ease-in-out;
  transition: opacity 0.2s ease-in-out;
  -webkit-transform: scale3d(1, 1, 1);
  -moz-transform: scale3d(1, 1, 1);
  transform: scale3d(1, 1, 1);
  -webkit-transition: -webkit-transform 0.2s ease-in-out;
  -moz-transition: -moz-transform 0.2s ease-in-out;
  transition: transform 0.2s ease-in-out;
  visibility: hidden;
}
.default .reply a:hover {
  opacity: 1;
  -ms-filter: none;
  filter: none;
}
.default .reply a:hover {
  -webkit-transform: scale3d(1.1, 1.1, 1);
  -moz-transform: scale3d(1.1, 1.1, 1);
  transform: scale3d(1.1, 1.1, 1);
}
.comtr > td > table:hover .default .reply a {
  visibility: visible;
}
.title > a:visited {
  color: #8e4700;
}
.subtext > a:last-child {
  color: #5a5aa0;
  text-decoration: none;
  font-weight: bold;
}
.subtext > a:last-child:visited {
  color: #c60;
}
.subtext > a:last-child:hover {
  text-decoration: underline;
}
.comment {
  padding: 0.25rem 0;
}
.comment .c00 {
  color: #121314 !important;
}
.comment .cce,
.comment .c73 {
  color: inherit !important;
  opacity: 0.8;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=80)";
  filter: alpha(opacity=80);
}
.comment > span > a,
.comment > span > p a {
  padding-bottom: 1px;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: rgba(51,119,255,0.5);
}
.comment > span > a,
.comment > span > p a,
.comment > span > a:link,
.comment > span > p a:link {
  color: inherit;
}
.comment > span > a:visited,
.comment > span > p a:visited {
  border-bottom-color: rgba(204,102,0,0.5);
}
.comment > span > a,
.comment > span > p a,
.comment > span > a:hover,
.comment > span > p a:hover,
.comment > span > a:link,
.comment > span > p a:link,
.comment > span > a:visited,
.comment > span > p a:visited {
  text-decoration: none;
}
.comment > span > a:hover,
.comment > span > p a:hover {
  color: #37f;
  -webkit-transition: all ease-in 0.25s;
  -moz-transition: all ease-in 0.25s;
  transition: all ease-in 0.25s;
}
.comment > span > a:hover:visited,
.comment > span > p a:hover:visited {
  color: #c60;
}
.svg-arrow {
  fill: #00f;
}
.comtr td.votelinks {
  position: relative;
  width: 0;
}
.comtr td.votelinks > center a {
  display: -webkit-flex;
  display: flex;
  position: absolute;
  top: 0.25em;
  left: 0.25em;
  width: 13pt;
  height: 13pt;
  z-index: 10;
  -webkit-transform: scale3d(1, 1, 1);
  -moz-transform: scale3d(1, 1, 1);
  transform: scale3d(1, 1, 1);
  -webkit-transition: -webkit-transform 0.2s ease-in-out;
  -moz-transition: -moz-transform 0.2s ease-in-out;
  transition: transform 0.2s ease-in-out;
  -webkit-background-size: 10pt;
  -moz-background-size: 10pt;
  background-size: 10pt;
  background-position: 50% 50%;
  background-repeat: no-repeat;
}
.comtr td.votelinks > center a:hover {
  -webkit-transform: scale3d(1.25, 1.25, 1);
  -moz-transform: scale3d(1.25, 1.25, 1);
  transform: scale3d(1.25, 1.25, 1);
}
.comtr td.votelinks > center a.nosee {
  visibility: visible;
  opacity: 0.25;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=25)";
  filter: alpha(opacity=25);
}
.comtr td.votelinks > center a[id^=up] {
  background-image: url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2224%22 height=%2224%22 viewBox=%220 0 24 24%22%3E%3Cpath class=%22svg-up%22 d=%22M 12 3 l -10 18 h 20 z%22/%3E%3C/svg%3E");
}
.comtr td.votelinks > center a[id^=up] .svg-up {
  fill: #080;
}
.comtr td.votelinks > center a[id^=down] {
  background-image: url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2224%22 height=%2224%22 viewBox=%220 0 24 24%22%3E%3Cpath class=%22svg-down%22 d=%22M 12 21 l -10 -18 h 20 z%22/%3E%3C/svg%3E");
}
.comtr td.votelinks > center a[id^=down] .svg-down {
  fill: #f00;
}
.comtr td.votelinks > center a .nosee {
  visibility: visible;
}
.comtr td.votelinks > center a .votearrow {
  display: none;
}
.comtr .comhead {
  padding-left: 1.25em;
}
tr.spacer {
  height: 10px !important;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
