body {
  color: #3a3335;
  background-color: #fbfbf2;
}
@media only screen and (min-width: 960px) {
  .sm-page-layout-region-header {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    height: 60px;
    z-index: 99;
    -webkit-box-shadow: 0 0 12px 4px rgba(0,0,0,0.12);
    box-shadow: 0 0 12px 4px rgba(0,0,0,0.12);
  }
  .sm-page-layout-region-header .sm-page-layout-region-top {
    height: 100% !important;
  }
  .sm-page-layout-region-header .sm-page-layout-row {
    display: -webkit-flex;
    display: flex;
    -webkit-flex-flow: row nowrap;
    flex-flow: row nowrap;
    -webkit-justify-content: space-between;
    justify-content: space-between;
    -webkit-align-items: center;
    align-items: center;
    height: 100%;
  }
  .sm-page-layout-region-header .sm-page-layout-row .sm-page-layout-column {
    -webkit-flex: 0 1 auto;
    flex: 0 1 auto;
  }
  .sm-page-layout-region-header .sm-page-layout-row .sm-page-layout-column:first-child {
    padding-left: 50px;
    text-align: left;
  }
  .sm-page-layout-region-header .sm-page-layout-row .sm-page-layout-column:last-child {
    padding-right: 50px;
    text-align: right;
  }
  .sm-page-layout-region-header .sm-page-layout-row .sm-page-layout-column .sm-page-widget .sm-page-widget-content {
    margin: 0;
  }
}
.sm-page-layout-region-center .sm-page-layout-region.sm-page-layout-region-center .sm-page-widget.sm-page-widget-text {
  width: 60%;
  margin: 2em auto;
}
@media only screen and (max-width: 599px) {
  .sm-page-layout-region-center .sm-page-layout-region.sm-page-layout-region-center .sm-page-widget.sm-page-widget-text {
    margin: 8px;
    width: auto;
  }
}
@media only screen and (min-width: 960px) {
  .sm-page-layout-region-center .sm-page-layout-region.sm-page-layout-region-center .sm-page-widget.sm-page-widget-sociallinks li {
    -webkit-transition: -webkit-transform 0.25s ease-in-out;
    -moz-transition: -moz-transform 0.25s ease-in-out;
    transition: transform 0.25s ease-in-out;
    padding-right: 8px;
  }
  .sm-page-layout-region-center .sm-page-layout-region.sm-page-layout-region-center .sm-page-widget.sm-page-widget-sociallinks li:hover {
    -webkit-transform: scale3d(1.25, 1.25, 1);
    -moz-transform: scale3d(1.25, 1.25, 1);
    transform: scale3d(1.25, 1.25, 1);
  }
}
.sm-page-layout-region-footer p {
  color: #3c3744;
  font-size: 0.9em;
}
.sm-tiles-fit.sm-tile-single.sm-tile-center .sm-tile-wrapper {
  min-width: 100% !important;
  margin-top: -80px;
}
.sm-sitedesign-preview {
  margin-top: 0 !important;
}
.sm-sitedesign-preview .sm-nui .sm-bar {
  top: initial;
  bottom: 0;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
