@import url("https://fonts.googleapis.com/css?family=Noto+Sans:400,400i,700,700i");
body {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizeLegibility;
  letter-spacing: normal;
  word-spacing: normal;
  font: 14pt/1.44em 'Noto Sans', sans-serif !important;
  color: #181818 !important;
}
pre,
code,
tt,
kbd {
  font-family: Consolas, Monaco, monospace !important;
  font-size: inherit;
  line-height: 1.44em !important;
}
pre {
  white-space: pre-wrap;
}
/* General growing and shrinking... */
.site-search .form-control,
span.counter {
  font-size: 10pt !important;
}
span.counter {
  padding-top: 6px !important;
}
.site-search input[name=q],
.repo-list-stats,
.timeline-commits td,
.filter-list.small .filter-item,
.commit .sha-block,
.commit .sha,
.commit-tease .authorship,
.repository-sidebar .repo-nav,
.issue-meta,
.issue-comments {
  font-size: 11pt !important;
}
.gh-header-meta,
.header-nav-link,
.repo-list-description,
.repo-list-meta,
.file-info {
  font-size: 12pt !important;
}
.comment-body,
.issue-title-link {
  font-size: 13pt !important;
}
.notification-indicator .mail-status {
  width: 18px !important;
  height: 18px !important;
}
/* Nav bar */
.header {
  padding-bottom: 5px !important;
}
.user-nav .octicon-bell {
  font-size: 28px !important;
  width: 28px !important;
  height: 30px !important;
}
.user-nav .header-nav-link {
  height: auto !important;
  margin-top: -4px !important;
  padding-top: 0 !important;
  padding-bottom: 0 !important;
}
.user-nav .header-nav-link img {
  width: 40px !important;
  height: 40px !important;
  border: solid #888 1px !important;
}
.header-nav-item .dropdown-caret {
  vertical-align: 0 !important;
}
/* Widen content */
.container {
  min-width: 1280px;
}
.repository-with-sidebar .repository-sidebar {
  margin-left: 20px !important;
}
.repository-with-sidebar .repository-content {
  -webkit-order: 0;
  order: 0;
  -webkit-flex: 1 1 auto;
  flex: 1 1 auto;
  float: none !important;
}
/* Module home/folder view */
table.files {
  font-size: 13pt;
}
table.files td.message,
table.files td.message a,
table.files td.age,
.repository-meta,
.numbers-summary li {
  color: #222 !important;
}
.numbers-summary a:hover {
  color: #07f !important;
}
.commit-tease .zeroclipboard-link {
  margin-top: 4px !important;
  margin-left: 10px !important;
}
/* Module file view */
.tab-size[data-tab-size] {
  -moz-tab-size: 2 !important;
  tab-size: 2 !important;
}
.file,
.file-header,
.blob-num {
  border-color: #aaa !important;
}
.file-info {
  color: #0000cd !important;
}
tr:nth-child(1) td {
  padding-top: 0.5em !important;
}
tr:nth-last-child(1) td {
  padding-bottom: 0.5em !important;
}
.issues-listing .table-list-issues .issue-title {
  padding-top: 7px !important;
  padding-bottom: 4px !important;
}
.issues-listing .table-list-issues .table-list-cell-avatar {
  padding-top: 11px !important;
}
.issues-listing .table-list-issues .issue-comments {
  padding-top: 6px !important;
}
.table-list-cell-type {
  padding-top: 4px !important;
}
.issue-title-link,
.issues-listing .table-list-issues .labels,
.issue-meta {
  margin-bottom: 0 !important;
  vertical-align: top;
}
/* Discussions */
#discussion_bucket::before,
#discussion_bucket::after {
  display: none;
}
#discussion_bucket .discussion-sidebar {
  margin-left: 20px !important;
}
.previewable-comment-form textarea {
  min-height: 240px !important;
  font-family: Consolas, monospace;
  font-size: 0.9em;
  line-height: inherit;
  color: #121212;
}
:not(.oauth-wrapper) .highlight,
:not(.oauth-wrapper) .prettyprint {
  color: #f2f3f4;
}
:not(.oauth-wrapper) .highlight,
:not(.oauth-wrapper) .highlight pre,
:not(.oauth-wrapper) .prettyprint {
  background-color: #181818 !important;
}
.blob-num,
.blob-code-inner,
.prettyprint {
  padding-top: 0.05em;
  padding-bottom: 0.05em;
  font-size: 10pt !important;
  line-height: 1.44em !important;
  text-rendering: optimizeLegibility !important;
  word-spacing: normal;
  letter-spacing: normal;
}
.blob-num,
.prettyprint ol.linenums li {
  color: #bd87ee !important;
  text-shadow: none !important;
  padding-top: 4px !important;
}
.blob-code-inner,
.prettyprint .pln {
  color: #f2f3f4 !important;
/* Current line highlight */
}
.blob-code-inner[style],
.prettyprint .pln[style] {
  background-color: rgba(240,248,255,0.5) !important;
}
.blob-num-addition,
.blob-code-addition {
  background-color: #141 !important;
}
.blob-code-addition .x {
  background-color: #218321 !important;
}
.blob-code-deletion .x {
  background-color: #832121 !important;
  color: #b5b6b7;
}
.blob-num-deletion,
.blob-code-deletion {
  background-color: #411 !important;
}
.blob-code-hunk,
.blob-code-expandable {
  background: -webkit-linear-gradient(left, rgba(65,65,65,0.5) 0%, rgba(64,32,64,0.25) 50%, #202020 100%);
  background: -moz-linear-gradient(left, rgba(65,65,65,0.5) 0%, rgba(64,32,64,0.25) 50%, #202020 100%);
  background: linear-gradient(to right, rgba(65,65,65,0.5) 0%, rgba(64,32,64,0.25) 50%, #202020 100%);
}
.blob-expanded .blob-num,
.blob-expanded .blob-code {
  background-color: #333 !important;
}
.file-diff-split .empty-cell {
  background-color: #333 !important;
}
.pl-c,
.com {
  color: #50c878 !important;
  font-style: italic !important;
}
.pl-k,
.pl-ent,
.kwd {
  color: #ff8 !important;
  font-weight: bold !important;
}
.pl-v {
  color: #ff8;
}
.pl-c1,
.pun,
.type-css .pl-c1 + .pl-k,
.type-scss .pl-c1 + .pl-k,
.type-stylus .pl-c1 + .pl-k {
  color: #f88 !important;
}
.pl-sr,
.pl-sr *,
.type-css .pl-ii,
.type-scss .pl-ii,
.type-stylus .pl-ii {
  color: #ff1493;
}
.pl-e,
.pl-en,
.type-html .pl-ent {
  color: #ee82ee !important;
}
.pl-mb {
  color: #f2f3f4;
  font-weight: bold;
}
.pl-mi {
  color: #f2f3f4;
  font-style: italic;
}
.pl-smi,
.typ,
.type-css .pl-e,
.type-scss .pl-e,
.type-stylus .pl-e {
  color: #ff8c00;
  font-style: italic;
}
.pl-s .pl-pds,
.pl-s .pl-s1,
.pl-s .pl-s1 .pl-pse,
.x {
  color: #d6cadd;
}
.pl-s,
.str {
  color: #88ffc4 !important;
  font-style: italic !important;
}
.type-css .pl-ii {
  background-color: inherit;
}
.type-css .pl-smi {
  color: #5cf !important;
}
.type-scss .pl-ii {
  background-color: inherit;
}
.type-scss .pl-smi {
  color: #5cf !important;
}
.type-stylus .pl-ii {
  background-color: inherit;
}
.type-stylus .pl-smi {
  color: #5cf !important;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
